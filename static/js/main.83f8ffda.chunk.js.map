{"version":3,"sources":["components/intro/Intro.tsx","components/componentsreact/ClassComponent.tsx","components/componentsreact/FunctionalComponent.tsx","components/componentsreact/Components.tsx","components/stateprops/Properties.tsx","components/stateprops/State.tsx","components/basic/Input.tsx","components/basic/SingleInputForm.tsx","components/form/FormDemo.tsx","components/accordion/Accordion.tsx","components/lifecycle/LifecycleComponent.tsx","components/lifecycle/LifecycleDemo.tsx","components/graphdemo/canvas/Canvas.tsx","components/graphdemo/graphform/GraphValueInputs.tsx","components/graphdemo/graphform/GraphForm.tsx","components/graphdemo/Graph.tsx","components/basic/Anchor.tsx","components/header/Header.tsx","components/basic/Code.tsx","components/hooks/HookState.tsx","components/hooks/HookEffect.tsx","components/hooks/Hooks.tsx","components/conditionalrendering/ConditionalRendering.tsx","components/conditionalrendering/Conditional.tsx","components/standards/Standards.tsx","components/main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Intro","props","className","id","ClassComponent","React","Component","FunctionalComponent","Properties","name","Welcome","State","state","quote","author","this","Input","type","class","value","onChange","event","target","placeholder","SingleInputForm","useState","setValue","onSubmit","preventDefault","handleSubmit","inputClass","hideButton","buttonClass","buttonLabel","FormDemo","stylize","toUpperCase","submitValues","condition","firstName","bind","setState","map","Accordion","handleVisible","visible","title","children","onClick","LifecycleComponent","setMessage","setVisible","LifecycleDemo","handleMessage","message","Canvas","canvas","createRef","refreshCanvas","colors","c","current","ctx","getContext","clearRect","canvasWidth","canvasHeight","drawLabels","labels","drawGraph","graphData","fixCanvas","dpi","window","devicePixelRatio","mycanvas","style_height","getComputedStyle","getPropertyValue","slice","canvasPadding","setAttribute","createGrid","lineWidth","strokeStyle","i","beginPath","moveTo","lineTo","columns","stroke","rows","numDigits","x","Math","max","floor","log10","abs","getMaxScaleValue","length","k","pow","ceil","calculateSectionWidth","sections","padding","calculateColumnWidth","sectionWidth","calculateMaxValue","gd","array","data","calculateK","graphHeight","columnWidth","maxValue","scaleMax","xCoord","drawCoordLines","forEach","index","centerTextOnCanvas","label","updateCanvas","left","fontSize","fillStyle","fillRect","font","fillText","measureText","width","txt","currentLeft","currentTop","top","prevProps","color","height","scale","ref","GraphValueInputs","handleChange","prevState","inputValues","handleValuesID","valuesID","inputArray","v","push","clearValues","key","GraphForm","handleLabelSubmit","includes","deleteLabel","splice","filter","deleteData","setGraphData","display","e","GraphContainer","graphName","Anchor","style","displayText","Header","href","anchor","selected","setSelected","Code","formatted","text","split","item","margin","setText","HookEffect","count","setCount","useEffect","document","Hooks","HookState","ConditionalRendering","setCondition","Conditional","Standards","Main","pages","intro","graphdemo","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.83f8ffda.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Intro.css\"\n\nexport default function Intro(props: any){\n    return <div className=\"intro\" id=\"intro\">\n        <h1>ReactJS</h1>\n        ReactJS je JavaScript biblioteka za kreiranje Single-page aplikacija. <br/>\n        Kao glavni cilj ima kreiranje korisničkih interfejsa. <br/>\n        Zasniva se na kreiranju komponenata koje se mogu upotrebiti više puta.<br />\n        React koristi JSX za kreiranje elemenata. JSX je deo JavaScript-a koji izgleda kao HTML kod, ali nije, već je kombinacija JavaScript-a i XML-a.\n        Neki od atributa unutar ovih elemenata se mogu razlikovati od ekvivalenata u HTML-u. \n        Takodje prilikom pisanja atributa od dve ili vise reči koristi se camel case umesto \"-\".\n        Iako se JSX često koristi nije obavezan prilikom pisanja React aplikacija.<br />\n        Primer JSX-a:<br />\n        <div className=\"code\">\n            {'return <div className=\"container\">Zdravo!</div>'}\n        </div>\n\n    </div>\n}","import React from 'react';\n\nclass ClassComponent extends React.Component<{}, {}> {\n    render() {\n        return <div className=\"flex-vertical-container\">\n            <div>\n                <h3>Class</h3>\n                <div>\n                    Sve class komponente moraju naslediti Component klasu od react-a. Takođe moraju sadržati metodu render koja ce kao povratnu vrenost imati element.\n                    Često sadrže i constructor u kome se nalazi default vrednosti za state ukoliko nam je potreban. Do uvođenja Hooks class komponente su jedine imaje state.\n            </div>\n            </div>\n            <div>\n                Primer\n            <div className=\"code\">\n                    <span className=\"violet\">import</span> <span className=\"green\">React</span> <span className=\"violet\">from</span> <span className=\"orange\">'react'</span>;<br />\n                    <span className=\"violet\">export default</span> <span className=\"blue\">class</span> <span className=\"yellow\">HelloWorld</span>\n                    <span className=\"blue\"> extends</span> <span className=\"green\">React.Component</span>{\"{\"} <br />\n                    &emsp;<span className=\"blue\">render</span>(){'{'} <br />\n                    &emsp;&emsp;<span className=\"violet\">return</span> <span className=\"blue\">{\"<div>\"}</span><br />\n                    &emsp;&emsp;&emsp;Hello World!<br />\n                    &emsp;&emsp;<span className=\"blue\">{\"</div>\"}</span><br />\n                    &emsp;{\"}\"}<br />\n                    {\"}\"}\n                </div>\n            </div>\n        </div>\n    }\n}\n\nexport default ClassComponent","import React from 'react';\n\nexport default function FunctionalComponent(props: any) {\n    return <div className=\"flex-vertical-container\">\n        <div>\n            <h3>Function</h3>\n            <div>\n                Funkcionalne komponente su komponente koje bi najčešće trebalo upotrebljavati. Kao parametar uzimaju props, dok se state moze realizovati uz pomoć Hooks. Pre uvođenja Hooks ovaj tip komponente je bio stateless.\n                Funkcije su bliže obicnom JavaScript-u zbog čega je ova vrsta komponente bolja za korišćenje.\n            </div>\n        </div>\n        <div>\n            Primer\n            <div className=\"code\">\n                <span className=\"violet\">import</span> <span className=\"green\">React</span> <span className=\"violet\">from</span> <span className=\"orange\">'react'</span>;<br />\n                <span className=\"violet\">export default</span> <span className=\"blue\">function</span> <span className=\"yellow\">HelloWorld</span>() {\"{\"} <br />\n                &emsp;<span className=\"violet\">return</span> <span className=\"blue\">{\"<div>\"}</span><br />\n                &emsp;&emsp;Hello World!<br />\n                    &emsp;<span className=\"blue\">{\"</div>\"}</span><br />\n                {\"}\"}\n            </div>\n        </div>\n    </div>\n}","import React from 'react';\nimport ClassComponent from './ClassComponent';\nimport FunctionalComponent from './FunctionalComponent';\nimport './Components.css';\n\nexport default function(){\n    return <div>\n        <div>\n            Komponente su osnovne gradivne jedinice u React-u. Nezavisne su u mogu se ponavljati po potrebi. \n            Mogu se kreirati uz pomoć funkcija ili klasa. Sve elementi jedne komponente moraju se nalaziti u jednom roditeljskom elementu koji komponenta vraća.\n            Svaka komponenta mora sadžati import React-a. Ukoliko se state ili props promene komponenta će se rerender-ovati, ali neće morati cela stranica da se ponovo render već samo ta komponenta.\n        </div>\n        <div className=\"flex-container\">\n        <ClassComponent />\n        <FunctionalComponent />\n        </div>\n    </div>\n}","import React from 'react';\n\nexport default function Properties() {\n    return <div className=\"flex-vertical-container\">\n        <h2>Properties</h2>\n        <div>\n            Sve komponente mogu da imaju svoje props (properties). Props su atributi prosleđeni nekoj komponenti. Props su Read-only\n        </div>\n        <div>\n            Primer\n            <div className=\"code\">\n                <span className=\"blue\">function</span> <span className=\"yellow\">Welcome</span>\n                (props: {\"{\"} name: <span className=\"green\">string</span>{\"}\"}) {\"{\"} <br />\n                &emsp;<span className=\"violet\">return</span> <span className=\"blue\">{\"<div>\"}</span><br />\n                &emsp;&emsp;Welcome, {\"{\"} props.name {\"}\"}!<br />\n                    &emsp;<span className=\"blue\">{\"</div>\"}</span><br />\n                {\"}\"}\n            </div>\n            Rezultat\n            <div className=\"result\">\n                <Welcome name=\"everyone\"/>\n            </div>\n        </div>\n    </div>\n}\n\n\nfunction Welcome(props: { name: string }) {\n    return <div>\n        Welcome, {props.name}!\n     </div>\n}","import React from 'react';\n\nexport default function State(){\n    return <div className=\"flex-vertical-container\">\n        <h2>State</h2>\n        <div>\n            Komponente mogu da imaju svoj state. State su atributi koji pripadaju komponenti u kojoj su definisani, za razliku od props koje roditelj prosleđuje i koji su read-only. Sa uvođenjem Hooks i funkcionalne komponente mogu realizovati state.\n            Kod class komponenti definiše se u constructoru, a u funkcionalnim korišćenjem useState() hook-a.\n        </div>\n        <div>\n            Primer\n            <div className=\"code\">\n                <span className=\"blue\">class</span> <span className=\"yellow\">Welcome</span> \n                <span className=\"blue\"> extends</span> <span className=\"green\">React.Component</span>\n                {\"< {}, { \"} quote: <span className=\"green\">string</span>, author: <span className=\"green\">string</span> {\"} >\"}\n                {\"{\"}<br />\n                &emsp;<span className=\"blue\">constructor</span> (props: <span className=\"green\">any</span>) {\"{\"} <br/>\n                &emsp;&emsp;<span className=\"blue\">super</span> ( props );<br />\n                &emsp;&emsp;<span className=\"blue\">this</span>.state = {\"{\"} <br />\n                &emsp;&emsp;&emsp;quote: <span className=\"orange\">\"Be yourself; everyone else is already taken.\"</span>, <br />\n                &emsp;&emsp;&emsp;author: <span className=\"orange\">\"Oscar Wilde\"</span> <br />\n                &emsp;&emsp;{\"}\"}; <br />\n                &emsp;{\"}\"} <br />\n                &emsp;<span className=\"yellow\">render</span> (){\"{\"}<br />\n                &emsp;&emsp;<span className=\"violet\">return</span> <span className=\"blue\">{\"<div>\"}</span><br />\n                &emsp;&emsp;&emsp;\"{\"{\"} <span className=\"blue\">this</span>.state.quote {\"}\"}\"<br />\n                &emsp;&emsp;&emsp;- {\"{\"} <span className=\"blue\">this</span>.state.author {\"}\"}<br />\n                &emsp;&emsp;<span className=\"blue\">{\"</div>\"}</span><br />\n                &emsp;{\"}\"}<br/>\n                {\"}\"}\n            </div>\n            Rezultat\n            <div className=\"result\">\n                <Welcome />\n            </div>\n        </div>\n    </div>\n}\n\nclass Welcome extends React.Component< {}, { quote: string, author: string } >{\n     constructor (props: any) {\n      super ( props );\n      this.state = {\n        quote: \"Be yourself; everyone else is already taken.\",\n        author: \"Oscar Wilde\"\n      };\n     }\n     render (){\n      return <div>\n        \"{ this.state.quote }\" <br />\n        - {this.state.author}\n      </div>\n     }\n    }","import React from 'react';\n\ninterface InputProps {\n    onChange: any;\n    value: string;\n    id: string;\n    class?: string;\n    type: string;\n    placeholder?: string;\n}\n\nexport default function Input(props: InputProps) {\n    return <input\n        type={props.type}\n        className={props.class}\n        value={props.value}\n        id={props.id}\n        onChange={(event: any) => props.onChange(event.target.value, props.id)}\n        placeholder={props.placeholder} />\n}","import React, { useState } from 'react'\nimport Input from './Input'\n\ninterface FormProps {\n    handleSubmit: any;\n    buttonLabel: string;\n    hideButton? : boolean;\n    placeholder? : string;\n    inputClass?: string;\n    buttonClass?: string;\n}\nexport default function SingleInputForm(props: FormProps){\n    const [value, setValue] = useState(\"\")\n    function submit(event: any) {\n        event.preventDefault();\n        props.handleSubmit(value);\n        setValue(\"\");\n    }\n    return <form onSubmit={submit}>\n        <div className=\"flex-container\">\n        <Input type=\"text\" value={value} onChange={setValue} id=\"form\" placeholder={props.placeholder} class={props.inputClass}/>\n        {!props.hideButton && <button className={props.buttonClass}>{props.buttonLabel}</button>}\n        </div>\n    </form>\n}","import React from 'react';\nimport SingleInputForm from '../basic/SingleInputForm';\n\nexport default class FormDemo extends React.Component<{}, { submitValues: string[], condition: boolean, firstName: string }> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            submitValues: [],\n            condition: false,\n            firstName: \"\"\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(value: string) {\n        if (value)\n            this.setState(\n                { submitValues: [...this.state.submitValues, this.stylize(value)] }\n            )\n    }\n\n    stylize = (value: string) => {\n        return value.toUpperCase();\n    }\n\n    render() {\n        const { condition } = this.state;\n        return <div>\n            <div>\n                Forme u React-u se mogu ponašati kao obične HTML forme, ali one se često obrađuju uz pomoc metoda koje napišemo. Time možemo da sprečimo da se stranica ponovo učitava i samo izmenimo jednu komponentu koja je potrebna. <br />\n                Ukoliko koristimo class komponente metode moramo da bind za \"this\" kome pripada u konstruktoru,\n                 ali ukoliko se koriste arrow metode to nije potrebno jer vec u sebi sadrže \"this\". <br></br>\n                 Primer:\n            </div>\n\n            <div className=\"code\">\n                {\"constructor(props) {\"} <br />\n                {\"super(props);\"} <br />\n                {\"this.handleSubmit = this.handleSubmit.bind(this);\"} <br />\n                {\"}\"}<br /><br />\n                {\"handleSubmit(event) {\"} <br />\n                {\"alert(event.target.value);\"}<br />\n                {\"event.preventDefault(); //sprecava refresh stranice\"} <br/>\n                {\"}\"}<br />\n                <br />\n                {\"setValue = (event) => {\"} <br />\n                {\"this.setState({value: event.target.value});\"}<br />\n                {\"}\"}<br />\n                <br />\n                {\"render() {\"} <br />\n                {\"return <form onSubmit={this.handleSubmit}>\"} <br />\n                {'<input type=\"text\" value={this.state.value} onChange={this.setValue}/>'}<br />\n                {\"<button>Dodaj</button>\"}<br />\n                {\"</form>\"}<br />\n                {\"}\"}<br />\n            </div>\n\n\n\n            <ul>\n                {this.state.submitValues.map(value => <li>{value}</li>)}\n            </ul>\n            <SingleInputForm buttonLabel=\"Add\" handleSubmit={this.handleSubmit} />\n        </div>\n    }\n}","import React from \"react\";\nimport \"./Accordion.css\"\n\nexport default class Accordion extends React.Component<{ children: any, title: string }, { visible: boolean }> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            visible: false\n        }\n    }\n\n    handleVisible = () => {\n        this.setState({ visible: !this.state.visible });\n    }\n\n    render() {\n        const { title, children } = this.props;\n        const { visible } = this.state;\n        return <div className={visible ? \"accordion-container accordion-border\" : \"accordion-container\"}>\n            <div onClick={this.handleVisible} className={visible ? \"accordion-header accordion-active\" : \"accordion-header\"}>\n                <h2>{title}</h2>\n                <button\n                    className={visible ? \"accordion-button accordion-active\" : \"accordion-button\"}\n                    onClick={this.handleVisible}>\n                    {visible ? <span>&#8722;</span> : <span>&#43;</span>}\n                </button>\n            </div>\n            {visible && <div className=\"flex-container\">{children}</div>}\n        </div>\n    }\n}","import React from 'react';\n\nexport default class LifecycleComponent extends React.Component<{ setMessage: any, setVisible: any }, {}> {\n\n    componentDidMount() {\n        this.props.setMessage(\"Hello!\");\n    }\n\n    componentWillUnmount() {\n        this.props.setMessage(\"Goodbye!\");\n    }\n\n    render() {\n        return <div className=\"flex-vertical-container code\">\n            <div>\n                <button onClick={this.props.setVisible}>X</button>\n            </div>\n            <div>\n                componentDidMount(){\"{\"}<br />\n                this.props.setMessage(\"Hello!\");<br />\n            }\n            </div>\n            <div>\n                componentWillUnmount(){\"{\"}<br />\n                this.props.setMessage(\"Goodbye!\");<br />\n                }\n            </div>\n        </div>\n    }\n\n\n}","import React from 'react'\nimport LifecycleComponent from './LifecycleComponent'\n\nexport default class LifecycleDemo extends React.Component<{}, { message: string; visible: boolean; }> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            message: \"\",\n            visible: false\n        }\n    }\n\n    handleVisible = () => {\n        this.setState({\n            visible: !this.state.visible\n        })\n    }\n\n    handleMessage = (message: string) => {\n        this.setState({\n            message\n        })\n    }\n\n    render() {\n        return <div>\n            <div className=\"flex-container\">\n                <div className=\"flex-vertical-container\">\n                    <div>\n                        Class komponente mogu imati lifecycle metode. Ove metode se same pozivaju u određenim situacijama, nakon što se komponenta renderuje, nakon sto se promene props itd.\n                        Neke od ovih metoda su izbačene iz upotrebe ili zamenjene novim, zbog određenih bagova koji su se javljali. \n                        Dve osnovne metode su i contructor i render. <br/>\n                        Sa uvođenjem Hooks i funkcionalne komponente ih mogu realizovati uz pomoć useEffect().<br />\n                        Najčešće korišćene su\n                    </div>\n                    <ul>\n                        <li>componentDidMount() - poziva se nakon što se komponenta učita</li>\n                        <li>componentWillUnmount() - poziva se pre nego što će komponenta biti uništena. Služi da se zaustave timer-i ili uklone event listeneri.</li>\n                        <li>componentDidUpdate(prevProps, prevState) - poziva se nakon što se state ili props promene. Prilikom upotrebe trebalo bi dodati neki uslov kako bismo sprečili beskonačno pozivanje metode.</li>\n                    </ul>\n                    <div>\n                        <button onClick={this.handleVisible}>Klik</button>\n                    </div>\n                    <div>\n                        {this.state.message}\n                    </div>\n                </div>\n                {this.state.visible ? <LifecycleComponent setMessage={this.handleMessage} setVisible={this.handleVisible} /> : <div className=\"flex-vertical-container\"></div>}\n            </div>\n        </div>\n    }\n}","import React from 'react';\nimport './Canvas.css';\n\ninterface GraphData {\n    label: string;\n    array: GraphItem[]\n}\n\ninterface GraphItem {\n    value: number;\n    name?: string;\n}\n\nexport default class Canvas extends React.Component<{\n    graphData: GraphData[],\n    labels: string[],\n    graphName: string\n}, {\n    canvasHeight: number,\n    canvasWidth: number,\n    canvasPadding: number\n}> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            canvasHeight: 400,\n            canvasWidth: 1000,\n            canvasPadding: 40\n        }\n    }\n    canvas = React.createRef<HTMLCanvasElement>();\n\n    componentDidMount() {\n        this.fixCanvas()\n    }\n\n    componentDidUpdate(prevProps: { graphData: GraphData[] }) {\n        if (prevProps.graphData !== this.props.graphData) {\n            this.refreshCanvas();\n        }\n    }\n\n    refreshCanvas = () => {\n        let colors = [\n            \"#FFC09F\",\n            \"#81F4E1\",\n            \"#56CBF9\",\n            \"#FF729F\",\n            \"#FFEE93\",\n            \"#EF476F\",\n            \"#FFD166\",\n            \"#06D6A0\",\n            \"#118AB2\",\n            \"#073B4C\"\n        ]\n        let c: HTMLCanvasElement | null = this.canvas.current;\n        if (c) {\n            let ctx = c.getContext('2d')\n            if (ctx) {\n                ctx.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n                this.drawLabels(ctx, this.props.labels, colors)\n                this.drawGraph(this.props.graphData, ctx, colors);\n\n            }\n        }\n    }\n\n    fixCanvas = () => {\n        //get DPI\n        let dpi = window.devicePixelRatio;\n        //get canvas\n        let mycanvas = this.canvas.current;\n        //get context\n        if (mycanvas) {\n\n            //get CSS height\n            //the + prefix casts it to an integer\n            //the slice method gets rid of \"px\"\n            let style_height = +getComputedStyle(mycanvas).getPropertyValue(\"height\").slice(0, -2);\n            //get CSS width\n            let style_width = +getComputedStyle(mycanvas).getPropertyValue(\"width\").slice(0, -2);\n            //scale the canvas\n            let canvasWidth = style_width * dpi;\n            let canvasHeight = style_height * dpi;\n            let canvasPadding = this.state.canvasPadding * dpi;\n            mycanvas.setAttribute('height', canvasHeight + \"\");\n            mycanvas.setAttribute('width', canvasWidth + \"\");\n            this.setState({\n                canvasHeight,\n                canvasWidth,\n                canvasPadding\n            })\n\n        }\n    }\n\n\n\n\n    createGrid = (ctx: CanvasRenderingContext2D) => {\n        let rows = 2;\n        let blockSize = 40;\n        let columns = 2;\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = '#ccc';\n        for (let i = 1; i < rows; i++) {\n            ctx.beginPath()\n            ctx.moveTo(0, i * blockSize);\n            ctx.lineTo(columns * blockSize, i * blockSize);\n            ctx.stroke();\n        }\n        for (let i = 1; i < columns; i++) {\n            ctx.beginPath()\n            ctx.moveTo(i * blockSize, 0);\n            ctx.lineTo(i * blockSize, rows * blockSize);\n            ctx.stroke();\n        }\n    }\n\n    numDigits = (x: number): number => {\n        return Math.max(Math.floor(Math.log10(Math.abs(x))), 0) + 1;\n    }\n\n    getMaxScaleValue = (max: number): number => {\n        let length = this.numDigits(max);\n        let k = Math.pow(10, length - 2);\n        return Math.ceil(Math.ceil(max / k) / 2) * 2 * k;\n    }\n\n    calculateSectionWidth = (sections: number, canvasWidth: number, padding: number): number => {\n        return Math.floor(((canvasWidth - 2 * padding) / sections));\n    }\n\n    calculateColumnWidth = (columns: number, sectionWidth: number): number => {\n        return Math.floor(((sectionWidth * 0.8) / columns));\n    }\n\n    calculateMaxValue = (graphData: GraphData[]): number => {\n        return Math.max(...graphData.map(gd => Math.max(...gd.array.map((data: GraphItem) => data.value))));\n    }\n\n    calculateK = (graphHeight: number, canvasHeight: number): number => {\n        return canvasHeight / graphHeight\n    }\n\n    drawGraph = (graphData: GraphData[], ctx: CanvasRenderingContext2D, colors: string[]) => {\n        //ctx.transform(1, 0, 0, -1, 0, this.canvas.current ? this.canvas.current.height : 1000)\n        let sectionWidth: number = this.calculateSectionWidth(graphData.length, this.state.canvasWidth, this.state.canvasPadding);\n        let columnWidth: number;\n        let maxValue: number = this.calculateMaxValue(graphData);\n        let scaleMax: number = this.getMaxScaleValue(maxValue);\n        let xCoord: number = this.state.canvasPadding + Math.floor(sectionWidth * 0.2);\n        let k: number = this.calculateK(scaleMax, this.state.canvasHeight - this.state.canvasPadding * 2);\n        this.drawCoordLines(ctx, Math.floor(maxValue * k));\n        graphData.forEach((gd, index) => {\n            columnWidth = this.calculateColumnWidth(gd.array.length, sectionWidth);\n            this.centerTextOnCanvas(ctx, gd.label, xCoord, this.state.canvasHeight - this.state.canvasPadding, sectionWidth)\n            gd.array.forEach((data: GraphItem, i: number) => {\n                this.updateCanvas(ctx, colors[i], columnWidth, data.value, xCoord, k)\n                xCoord += columnWidth;\n            })\n\n            xCoord += Math.floor(sectionWidth * 0.1);\n        })\n    }\n\n    drawLabels = (ctx: CanvasRenderingContext2D, labels: string[], colors: string[]) => {\n        let left = this.state.canvasPadding * 2;\n        let fontSize = this.state.canvasHeight / 40;\n        labels.forEach((label, index) => {\n            ctx.fillStyle = colors[index];\n            ctx.strokeStyle = colors[index];\n            ctx.lineWidth = 1;\n            ctx.fillRect(left, this.state.canvasPadding / 2 - fontSize, 15, fontSize);\n            ctx.fillStyle = \"black\";\n            left += 20;\n            ctx.font = fontSize + \"px Roboto\";\n            ctx.fillText(label, left, this.state.canvasPadding / 2);\n            \n            left += ctx.measureText(label).width + 10\n        })\n    }\n\n    centerTextOnCanvas = (ctx: CanvasRenderingContext2D, txt: string, currentLeft: number, currentTop: number, sectionWidth: number) => {\n        let left: number = currentLeft + sectionWidth / 2 - ctx.measureText(txt).width / 2 - sectionWidth * 0.1;\n        let top: number = currentTop + this.state.canvasHeight / 40;\n        ctx.font = this.state.canvasHeight / 40 + \"px Roboto\";\n        ctx.fillStyle = 'black';\n        ctx.fillText(txt, left, top)\n    }\n\n    updateCanvas(ctx: CanvasRenderingContext2D, color: string, width: number, height: number, left: number, scale: number) {\n        let top = Math.floor(height * scale)\n        ctx.fillStyle = color;\n        ctx.strokeStyle = 'black';\n        ctx.lineWidth = 1;\n        ctx.font = this.state.canvasHeight / 40 + \"px Roboto\";\n        ctx.beginPath();\n        ctx.fillRect(left, this.state.canvasHeight - this.state.canvasPadding - top, width, top);\n        ctx.fillStyle = \"black\";\n        ctx.fillText(height + \"\", left, this.state.canvasHeight - this.state.canvasPadding - top);\n    }\n\n    drawCoordLines = (ctx: CanvasRenderingContext2D, graphHeight: number) => {\n        ctx.strokeStyle = \"black\";\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(this.state.canvasPadding, this.state.canvasPadding / 2);\n        ctx.lineTo(this.state.canvasPadding, this.state.canvasHeight - this.state.canvasPadding + 1);\n        ctx.lineTo(this.state.canvasWidth - this.state.canvasPadding / 2, this.state.canvasHeight - this.state.canvasPadding + 1);\n        ctx.stroke();\n        ctx.strokeStyle = \"#eeeeee\";\n        ctx.beginPath();\n        ctx.moveTo(this.state.canvasPadding, this.state.canvasHeight - this.state.canvasPadding - graphHeight);\n        ctx.lineTo(this.state.canvasWidth - this.state.canvasPadding, this.state.canvasHeight - this.state.canvasPadding - graphHeight + 1);\n        ctx.stroke()\n        ctx.moveTo(this.state.canvasPadding, this.state.canvasHeight - this.state.canvasPadding - graphHeight / 2);\n        ctx.lineTo(this.state.canvasWidth - this.state.canvasPadding, this.state.canvasHeight - this.state.canvasPadding - graphHeight / 2 + 1);\n        ctx.stroke()\n    }\n\n    render() {\n        return <canvas className=\"canvas\" ref={this.canvas} id=\"graphCanvas\" width={this.state.canvasWidth} height={this.state.canvasHeight}></canvas>\n    }\n}","import React from 'react'\nimport Input from '../../basic/Input'\n\nexport default class GraphValueInputs extends React.Component<{ labels: string[], handleSubmit: any }, { inputValues: any, valuesID: string }> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            inputValues: {},\n            valuesID: \"\"\n        };\n    }\n\n\n    handleChange = (value: string, id: string) => {\n        this.setState(prevState => {\n            let inputValues = {...prevState.inputValues};\n            inputValues[id] = +value;\n            return {\n                inputValues\n            }\n        })\n    }\n\n    handleValuesID = (valuesID: any) => {\n        this.setState({\n            valuesID\n        })\n    }\n\n    handleSubmit = () => {\n        const { valuesID, inputValues } = this.state;\n        let inputArray = [];\n        for (let v in inputValues) {\n            if(inputValues[v])\n            inputArray.push({\n                value: inputValues[v],\n                name: v\n            });\n        }\n        let data = {\n            label: valuesID,\n            array: inputArray\n        }\n        this.clearValues()\n        this.props.handleSubmit(data);\n\n    }\n\n    clearValues = () => {\n        this.setState(prevState => {\n            let inputValues = {...prevState.inputValues};\n            for (let key in inputValues) {\n                inputValues[key] = \"\"\n            }\n            return {\n                inputValues,\n                valuesID: \"\"\n            }\n        })\n    }\n\n    render() {\n        const { inputValues, valuesID } = this.state;\n        const { labels } = this.props\n        return <tr className=\"graph-form-row\">\n            <td>\n                <Input type=\"text\" value={valuesID} onChange={this.handleValuesID} id=\"valuesID\" class=\"graph-input\" placeholder=\"naziv grupe kolona\" />\n            </td>\n            {labels.map(label => <td key={label}>\n                <Input\n                    class=\"graph-input\"\n                    type='number'\n                    value={inputValues[label] || 0}\n                    onChange={this.handleChange}\n                    id={label}\n                    placeholder=\"vrednost za labelu\" />\n            </td>)}\n            {labels[0] && valuesID ?\n                <td >\n                    <button onClick={this.handleSubmit} className=\"graph-button\">\n                        Dodaj grupu\n                        </button>\n                </td> :\n                <td>\n                </td>}\n        </tr>\n    }\n}","import React from \"react\";\nimport SingleInputForm from \"../../basic/SingleInputForm\";\nimport GraphValueInputs from \"./GraphValueInputs\";\n\ninterface GFState {\n    labels: string[],\n    graphData: any\n}\n\nexport default class GraphForm extends React.Component<{ setGraphData: any }, GFState> {\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            labels: [],\n            graphData: {}\n        };\n    }\n\n    handleLabelSubmit = (label: string) => {\n        if (!this.state.labels.includes(label) && this.state.labels.length < 10) {\n            this.setState({ labels: [...this.state.labels, label] });\n        }\n    }\n\n    deleteLabel = (event: any) => {\n        let labels = [...this.state.labels];\n        const id = +event.target.id;\n        const label = labels.splice(id, 1);\n        \n        this.setState(prevState => {\n            let graphData = {...prevState.graphData};\n            for (let key in graphData) {\n                if (graphData[key])\n                   graphData[key].array = graphData[key].array.filter((data: number, index: number) => index != id)\n            }\n            return {\n                labels,\n                graphData\n            }\n        })\n    }\n\n    handleSubmit = (data: any) => {\n        this.setState(prevState => {\n            let graphData = {...prevState.graphData};\n            if (!graphData[data.label])\n                graphData[data.label] = data;\n            return {\n                graphData\n            }\n        });\n    }\n\n    deleteData = (key: any) => {\n        this.setState(prevState => {\n            let graphData = {...prevState.graphData};\n            graphData[key] = null;\n            return {\n                graphData\n            }\n        });\n    }\n\n    setGraphData = () => {\n        const { graphData } = this.state;\n        let data = [];\n        for (let key in graphData) {\n            if (graphData[key])\n                data.push(graphData[key])\n        }\n        this.props.setGraphData(data, this.state.labels)\n    }\n\n    render() {\n        const { labels, graphData } = this.state;\n        let display = [];\n        for (let key in graphData) {\n            if (graphData[key])\n                display.push(<tr className=\"graph-form-row\" key={graphData[key].label}>\n                    <td>{graphData[key].label}</td>\n                    {graphData[key].array.map((value: any, index: number) => <td key={index}>{value.value}</td>)}\n                    <td><button className=\"graph-button\" id={graphData[key].label} onClick={(e: any) => this.deleteData(e.target.id)}>Obriši grupu</button></td>\n                </tr>)\n        }\n        return <div>\n            <table className=\"graph-table\">\n                <tbody>\n\n                    <tr className=\"graph-form-row\">\n                        <td>Naziv kolona</td>\n                        {labels.map((label, index) => {\n                            return <td key={label}>\n                                <div className='graph-label' >\n                                    <div >{label}</div>\n                                    {<button id={index + \"\"} onClick={this.deleteLabel} >X</button>}\n                                </div>\n                            </td>\n                        })}\n                        {labels.length < 10 ? <td>\n                            <SingleInputForm\n                                handleSubmit={this.handleLabelSubmit}\n                                buttonLabel=\"Dodaj\"\n                                hideButton={false}\n                                buttonClass=\"graph-button\"\n                                placeholder=\"dodaj labelu\"\n                                inputClass=\"graph-input\" />\n                        </td> : <td></td>}\n                    </tr>\n                    {display}\n                    <GraphValueInputs labels={labels} handleSubmit={this.handleSubmit} />\n                </tbody>\n            </table>\n            <div className=\"graph-footer\">\n                <button onClick={this.setGraphData} className=\"graph-button\">Prikaži grafikon</button>\n            </div>\n        </div>\n    }\n}","import React from 'react';\nimport Canvas from './canvas/Canvas';\nimport './Graph.css'\nimport GraphForm from './graphform/GraphForm';\nimport Input from '../basic/Input';\n\nexport default class GraphContainer extends React.Component<{}, { \n    graphData: any[], \n    colors: string[], \n    labels: string[],\n    graphName: string }> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            graphData: [],\n            colors: [],\n            labels: [],\n            graphName: \"\"\n        }\n    }\n\n    setGraphData = (graphData: any, labels: string[]) => {\n        this.setState({graphData, labels})\n    }\n\n    handleChange = (graphName: any) => {\n        this.setState({graphName})\n    }\n\n    render() {\n        return <div className=\"graph-container\">\n            <h1>Generisanje grafikona</h1>\n            <div>\n                Naziv grafikona&nbsp;\n                <Input \n                type=\"text\"\n                id=\"graphname\"\n                value={this.state.graphName}\n                onChange={this.handleChange}\n                class={\"graph-input\"}/>\n            </div>\n            <GraphForm setGraphData={this.setGraphData}/>\n            <Canvas graphData={this.state.graphData} labels={this.state.labels} graphName={this.state.graphName}/>\n        </div>\n    }\n}","import React from 'react';\n\ninterface AnchorProps {\n    class: string;\n    style?: any;\n    onClick: any;\n    id: string;\n    displayText: string;\n}\n\nexport default function Anchor(props: AnchorProps){\n    return <button \n    className={props.class} \n    style={props.style} \n    id={props.id} \n    onClick={(event: any) => props.onClick(event.target.id)}>{props.displayText}</button>\n}","import React from 'react';\nimport Anchor from '../basic/Anchor';\nimport \"./Header.css\";\nimport AnchorType from '../../types/AnchorType';\n\nexport default function Header(props: {setSelected: any, selected: string}) {\n    const anchors: AnchorType[] = [\n        {\n            id: \"intro\",\n            href: \"\",\n            displayText: \"Uvod\"\n        },\n        {\n            id: \"graphdemo\",\n            href: \"\",\n            displayText: \"Demo\"\n        }\n    ]\n    return <header className=\"header\">\n        <nav className=\"navigation\">\n            {\n                anchors.map((anchor: AnchorType) => \n                    <Anchor \n                        key={anchor.id}\n                        class={props.selected === anchor.id ? \"selected anchor\" : \"anchor\"} \n                        displayText={anchor.displayText}\n                        onClick={props.setSelected}\n                        id={anchor.id}\n                    />\n                )}\n        </nav>\n    </header>\n}","import React from 'react';\n\nexport default function Code(props: {text: string}){\n    let formatted = props.text.split('\\n').map((item, i) => <p style={{ margin: 0 }} key={i}>{item}</p>);\n    return <div className=\"code\">\n        {formatted}\n    </div>\n}","import React, { useState } from 'react';\nimport Code from '../basic/Code';\n\nexport default function (props: {}) {\n    const [text, setText] = useState(\"\");\n    let example = `\n    import React, { useState } from 'react'\\n\n    function Hooks(props) {\\n\n        const [text, setText] = useState(\"\");\\n\n        return <div>\\n\n        {text}<br/>\\n\n        <input type=\"text\" value={text} onChange={event => setText(event.target.value)} />\\n\n        </div>\\n\n    }\n    `\n    return <div>\n        <div>\n            {text}<br />\n            <input type=\"text\" value={text} onChange={event => setText(event.target.value)} />\n        </div>\n        <Code text={example} />\n    </div>\n}","import React, { useEffect, useState } from \"react\";\nimport Code from '../basic/Code';\n\nexport default function HookEffect(props: {}) {\n    const [count, setCount] = useState(0);\n    useEffect(() => {\n        document.title = `Broj klikova: ${count}`\n    });\n\n    let example = `\n    import React, { useState, useEffect } from 'react'\\n\n    function Hooks(props) {\\n\n    const [count, setCount] = useState(0);\\n\n    useEffect(() => {\\n\n        document.title = \"Broj klikova: \" + count;\\n\n    });\\n\n        return <div>\\n\n        <p>Klik = {count}</p>\\n\n        <button onClick={() => setCount(count + 1)}>\\n\n            Klik\\n\n        </button>\\n\n    </div>\\n\n    }\n    `\n    \n\n    return (\n        <div>\n            <div>\n                <p>Klik = {count}</p>\n                <button onClick={() => setCount(count + 1)}>\n                    Klik\n                </button>\n            </div>\n\n            <Code text={example} />\n        </div>\n    );\n}","import React from 'react';\nimport HookState from './HookState';\nimport HookEffect from './HookEffect';\n\nexport default function Hooks(props: {}) {\n\n\n    return <div>\n        <div>Hooks su relativno \"nova\" stvar u React-u. \n        Koriste se da bi se realizovao state u funkcionalnim komponentama. \n        Pre uvođenja hooks sve funkcionalne komponente bile su stateless.\n        Takođe, hooks ne služe samo za state, mogu služiti i za lifecycle metode, a možemo i sami praviti hooks po potrebi.\n        Cilj hooks je da se u sto većoj meri zamene class komponente.\n        </div>\n        <HookState />\n        <HookEffect />\n        \n    </div>\n}","import React, { useState } from 'react';\n\nexport default function ConditionalRendering(props: {}){\n    const [condition, setCondition] = useState(false);\n    return condition ? <div>\n        Zahtev je poslat\n    </div> :\n    <div>\n        <button onClick={()=> setCondition(!condition)}>Pošalji zahtev</button>\n    </div>\n}","import React from 'react';\nimport ConditionalRendering from './ConditionalRendering';\nimport Code from '../basic/Code';\n\nexport default function Conditional(props: {}) {\n    let example = `\n    export default function ConditionalRendering(props: {}){ \\n\n        const [condition, setCondition] = useState(false);\\n\n        return condition ? <div>\\n\n            Zahtev je poslat\\n\n        </div> :\\n\n        <div>\\n\n            <button onClick={()=> setCondition(!condition)}>Posalji zahtev</button>\\n\n        </div>\\n\n    }\n    `;\n    return <div>\n        <div>\n        <div>\n            Conditional rendering je mogućnost da se na osnovu nekog uslova (iz state ili properties) prikažu razliciti elementi. Može se odnositi na čitave elemente, ali takođe se mogu menjati i parametri nekog elementa.\n        </div>\n        <Code text={example} />\n        </div>\n        <ConditionalRendering />\n    </div>\n}","import React from 'react';\n\nexport default function Standards(props: {}) {\n    return <div>\n        Primeri standarda:\n        <ul>\n            <li>\n                Ukoliko je moguće izbegavati korišćenje class komponenta.\n            </li>\n            <li>\n                Upotreba manjih komponenti.\n            </li>\n            <li>\n                Ponavljanje komponenti umesto kreiranje novih.\n            </li>\n            <li>\n                Bolje je pisati više manjih metoda, nego smeštati svu funkcionalnst u jednu.\n            </li>\n            <li>\n                Ne treba preterivati sa upotrebom state-a i lifecycle metoda.\n            </li>\n            <li>\n                Imena komponenti trebalo bi da poštoju pascal case i da se ime podudara sa imenom funkcije ili klase.\n            </li>\n            <li>\n                Komponente bi trebalo odvojiti u sopstvene foldere po svojoj funkcionalnsti. \n                Deca komponente se mogu nalaziti u pod folderima, ali treba izbegavati ići previše u dubinu.\n            </li>\n            <li>\n                Imena atributa elemenata poštuju camel case.\n            </li>\n            <li>\n                Imena promenljivih i metoda poštuju camel case.\n            </li>\n            <li>\n                CSS datoteke obično prate ime komponente za koju su namenjeni i nalaze se u istom folderu kao i komponenta.\n                Mogu se koristiti i CSS modules.\n            </li>\n            <li>\n                Imena CSS klasa uglavnom zavise od internog dogovora, ali mogu se poštovati i neki od CSS standarda.\n            </li>\n        </ul>\n        Ovi su samo neki od standarda i nisu svi obavezni, ali mogu olakšati razvoj aplikacije.\n    </div>\n}","import React, { Component } from 'react';\nimport Intro from '../intro/Intro';\nimport \"./Main.css\";\nimport Components from '../componentsreact/Components';\nimport Properties from '../stateprops/Properties';\nimport State from '../stateprops/State';\nimport FormDemo from '../form/FormDemo';\nimport Accordion from '../accordion/Accordion';\nimport LifecycleDemo from '../lifecycle/LifecycleDemo';\nimport GraphContainer from '../graphdemo/Graph';\nimport Header from '../header/Header';\nimport Hooks from '../hooks/Hooks';\nimport Conditional from '../conditionalrendering/Conditional'\nimport Standards from '../standards/Standards';\n\n\nclass Main extends Component<{}, {selected: any, pages: any}> {\n    constructor(props: any){\n        super(props);\n        this.state = {\n            selected: \"intro\",\n            pages: {}\n        };\n    }\n\n    componentDidMount(){\n        const pages = {\n            intro: <div>\n            <Intro />\n\n            <Accordion title=\"Komponente\">\n                <Components />\n            </Accordion>\n            <Accordion title=\"Properties i State\" >\n                <Properties />\n                <State />\n            </Accordion>\n            <Accordion title=\"Forme\">\n                <FormDemo />\n            </Accordion>\n            <Accordion title=\"Lifecycle metode\">\n                <LifecycleDemo />\n            </Accordion>\n            <Accordion title=\"Hooks\">\n                <Hooks />\n            </Accordion>\n            <Accordion title=\"Conditional Rendering\">\n                <Conditional />\n            </Accordion>\n            <Accordion title=\"Standardi\">\n                <Standards />\n            </Accordion>\n            </div>,\n            graphdemo: <GraphContainer />\n        }\n        this.setState({\n            pages\n        })\n    }\n\n    setSelected = (selected: string) => {\n        this.setState({\n            selected\n        })\n    }\n    render() {\n        return <div className=\"main\">\n            <Header setSelected={this.setSelected} selected={this.state.selected}/>\n            {this.state.pages[this.state.selected]}\n        </div>\n    }\n}\n\nexport default Main","import React from 'react';\nimport './App.css';\nimport Main from './components/main/Main';\n\nfunction App() {\n  return (\n    <div>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}